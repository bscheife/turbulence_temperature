function [likelihood, kB, f11]=fit_kB(k_obs,S_obs,Sn,X_T,nu,Dt,dof,q)%% This function calculates the best-fit theoretical batchelor spectrum to a% given observed spectrum. % It follows the maximum likelihood estimate approach from Ruddick et al% 2000. The original code was provided by Ruddick but this version has been% heavily modified (i.e. simplified) from that which Ruddick originally provided.%% Dependencies: C11.m, Batch_spec.mglobal stop2drawdof=dof; %degrees of freedom for the C11 modelnois=Sn; %noise spectrum%First we'll do a rough search over a large range of kB, maximizing the%cost function for each kB value. Here we'll use N logarithmically spaced%points. N gets recycled later on for the fine search. y is the array of%cost function values.N=100;kB_rough = 10.^linspace(0,4.5,N); %log-spaced pts in range 10^0 - 10^4.5y = zeros(length(kB_rough),1);for i=1:length(kB_rough)    %calculate Batchelor spectrum for this X and kB    S_theoretical = Batch_spec(kB_rough(i),k_obs,X_T,Dt,q)+nois;    %calculate cost function value associated with this kB    y(i) = C11(dof,S_obs,S_theoretical);end%Plot the C11 cost function against the Batchelor wavenumber kB%Assume three iterations of fit_kB in parent code micT_eps_chiif stop2draw    figure(2);    nAx = length(get(gcf,'children')); %How many axes currently exist?    itr = nAx/2+1; %which iteration?    if itr==1, clf, end;    subplot(2,6,nAx+1); hold on; box on; grid on; zoom on;     plot(kB_rough, (y), '-o'); xlabel('k_B'); ylabel('C11');    set(gca,'xscale','log');end%The maximum value in y is the rough estimate[maxY, ind_max] = max(y);%Repeat the above calculation with a finer kB grid, searching around the%recently identified maximum. This time we'll space kB linearlykB_fine = linspace(kB_rough(ind_max-1), kB_rough(ind_max+1), 100);for i=1:length(kB_fine)    S_theoretical = Batch_spec(kB_fine(i),k_obs,X_T,Dt,q)+nois;     y(i) = C11(dof,S_obs,S_theoretical);end%Plot refined C11 cost functionif stop2draw    subplot(2,6,nAx+2); hold on; box on; grid on; zoom on;    plot(kB_fine, y, '-o'); xlabel('k_B'); ylabel('C11');end%And return the results - likelihood value, fitted kB, and fitted spectrum[likelihood ind_max] = max(y);kB = kB_fine(ind_max);f11 = Batch_spec(kB,k_obs,X_T,Dt,q); if stop2draw    figure(3); if itr==1, clf, end;     %Draw measured and theoretical spectra    subplot(2,6,nAx+1); box on; grid on; zoom on; hold on;     set(gca,'xscale','log','yscale','log');     plot(k_obs, S_obs); plot(k_obs, f11+nois);    title(['Iteration ' num2str(itr)]);    %Plot test for Chi^2 distribution. See Ruddick 2000 Fig. 5a. For a    %perfect spectrum with statistical variability distributed as Chi^2    %pdf, the ratio Y_i = S_obs/S_th is distributed like Chi^2/dof     subplot(2,6,nAx+2); hold on; box on; grid on; zoom on;    Y = S_obs./(f11+nois);    histogram(dof*Y, 0:5:100, 'normalization', 'pdf');    xx = 0:0.01:100; plot(xx,chi2pdf(xx,dof));    title('test for chi-squared distribution');    xlabel('d S_{obs}/S_{th}')endend %end function